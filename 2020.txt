自我介绍：
我叫XXX
先后做过一些公司erp系统、hr系统
融资保理平台(包括移动端)、
保险销售平台（h5移动端）、
消费分期系统(业务对接)、
工作流平台（activiti6）、

接触过的技术包括最开始的jsp+struts2+bd2
到springboot+vue+mysql
uniapp

离职的原因： 技术方面想做后台java、 不想做前端的html5、vue


spring的理解：
轻量级的控制反转和面向切面的容器框架
IOC:控制反转+DI（依赖注入）
AOP：代理技术（CGLIB-- 未实现接口的类service、jdk的动态代理 --实现接口的类service）
理解spring需要明确三个角色：
	Spring容器 -- 通过配置文件管理Bean的创建、销毁，以及Bean之间的关系，其中包括IOC、DI等相关概念；
	配置文件 -- 配置文件（xml、注解）提供Bean（对象）之间的关系；
	Bean（对象）-- 应用程序的业务功能、非业务功能实现
	
Spring的启动流程  参考：https://my.oschina.net/u/4393418/blog/3251345

	Bean的生命周期  Bean定义的加载-->实例化-->初始化-->容器关闭-->销毁

	Spring基本流程
	1.Spring加载配置文件，初始化Spring容器（ApplicationContext）相关信息
	2.设置BeanFactory的基本信息
	3.将相关Bean注册到BeanFactory中（该过程中存在相关的Bean的实例化和初始化、执行）
	4.BeanFactory实例化已被注册但是没有实例化的Bean
	5.完成refresh()  包括清除资源缓存、初始化生命周期处理器、发布相关广播

	其中的具体流程：
	1.ClassPathXmlApplicationContext通过加载配置文件完成Spring环境的初始化  ClassPathXmlApplicationContext构造方法中调用了refresh()
	2.AbstractApplicationContext.refresh()代码如下
	
		public void refresh() throws BeansException, IllegalStateException {
			synchronized (this.startupShutdownMonitor) {
				// Prepare this context for refreshing.
				// 环境准备
				prepareRefresh();

				// Tell the subclass to refresh the internal bean factory.
				// 重置AbstractApplicationContext持有的BeanFactory 完成Bean定义的加载，没有实例化
				ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

				// Prepare the bean factory for use in this context.
				// 设置BeanFactory的基础属性
				prepareBeanFactory(beanFactory);

				try {
					// Allows post-processing of the bean factory in context subclasses.
					//修改bean的定义或增加自定义的Bean
					postProcessBeanFactory(beanFactory);

					// Invoke factory processors registered as beans in the context.
					//在Spring容器中找出实现了BeanFactoryPostProcessor接口的Bean并执行
					invokeBeanFactoryPostProcessors(beanFactory);

					// Register bean processors that intercept bean creation.
					//从Spring容器中找出的BeanPostProcessor接口的Bean，并添加到BeanFactory内部维护的List属性中，以便后续Bean被实例化的时候调用这个BeanPostProcessor进行回调处理
					registerBeanPostProcessors(beanFactory);

					// Initialize message source for this context.
					// Spring容器初始化一些国际化相关属性
					initMessageSource();

					// Initialize event multicaster for this context.
					// Spring容器中初始化事件事件广播起对象
					initApplicationEventMulticaster();

					// Initialize other special beans in specific context subclasses.
					//模板方法，可用于refresh动作的扩展，默认为空实现。在SpringBoot中主要用于启动内嵌的web服务器。
					onRefresh();

					// Check for listener beans and register them.
					//找出系统中的ApplicationListener对象，注册到时间广播器中
					registerListeners();

					// Instantiate all remaining (non-lazy-init) singletons.
					// 例化BeanFactory中已经被注册但是未实例化的所有实例(懒加载的不需要实例化)，主要操作是BeanFacotry的preInstantiateSingletons方法
					finishBeanFactoryInitialization(beanFactory);

					// Last step: publish corresponding event.
					finishRefresh();
				}

				catch (BeansException ex) {
					if (logger.isWarnEnabled()) {
						logger.warn("Exception encountered during context initialization - " +
								"cancelling refresh attempt: " + ex);
					}

					// Destroy already created singletons to avoid dangling resources.
					destroyBeans();

					// Reset 'active' flag.
					cancelRefresh(ex);

					// Propagate exception to caller.
					throw ex;
				}

				finally {
					// Reset common introspection caches in Spring's core, since we
					// might not ever need metadata for singleton beans anymore...
					resetCommonCaches();
				}
			}
		}



Springboot的启动流程  参考：https://my.oschina.net/u/4391973/blog/3237675
	其大致的流程和Spring启动的流程差不多
	1.加载配置文件（SpringBoot的自动配置，自动加载默认的配置）通过注解的方式实现
	2.准备环境变量（application.properties）
	3.创建容器，根据不同环境创建不同类型的applicationContext容器
	4.加载FailureAnalyzers对象，用于报告SpringBoot启动过程中的异常
	5.容器初始化  
	6.刷新容器  Spring启动中的refresh()方法
	7.刷新容器的后置处理逻辑  完成这一步的时候，容器就已经启动完毕了
	8.打印启动日志
	9.发送ApplicationStartedEvent事件，标志spring容器已经刷新，此时所有的bean实例都已经加载完毕
	10.调用ApplicationRunner和CommandLineRunner的run方法，实现spring容器启动后需要做的一些东西比如加载一些业务数据等


	启动代码：
		@SpringBootApplication
		public class JiaximoApiApplication {
			public static void main(String[] args) {
				SpringApplication.run(JiaximoApiApplication.class, args);
			}

		}

	1.从@SpringBootApplication注解开始
		以下是@SpringBootApplication注解的相关代码
			@Target(ElementType.TYPE)
			@Retention(RetentionPolicy.RUNTIME)
			@Documented
			@Inherited
			@SpringBootConfiguration //表示被标记的类为配置类
			@EnableAutoConfiguration //开启SpringBoot的自动配置、加载默认配置
			@ComponentScan(excludeFilters = {
					@Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
					@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
			public @interface SpringBootApplication {
				......
				}

	2.SpringApplication的构造方法  容器环境准备
		/**
	 * Create a new {@link SpringApplication} instance. The application context will load
	 * beans from the specified primary sources (see {@link SpringApplication class-level}
	 * documentation for details. The instance can be customized before calling
	 * {@link #run(String...)}.
	 * @param resourceLoader the resource loader to use
	 * @param primarySources the primary bean sources
	 * @see #run(Class, String[])
	 * @see #setSources(Set)
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
		this.resourceLoader = resourceLoader;
		Assert.notNull(primarySources, "PrimarySources must not be null");
		this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
		this.webApplicationType = WebApplicationType.deduceFromClasspath();
		setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
		this.mainApplicationClass = deduceMainApplicationClass();
	}
		
	3.SpringApplication的run方法   SpringBoot的启动步骤
	/**
	 * Run the Spring application, creating and refreshing a new
	 * {@link ApplicationContext}.
	 * @param args the application arguments (usually passed from a Java main method)
	 * @return a running {@link ApplicationContext}
	 */
	public ConfigurableApplicationContext run(String... args) {
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();
		ConfigurableApplicationContext context = null;
		Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();
		configureHeadlessProperty();
		SpringApplicationRunListeners listeners = getRunListeners(args);
		listeners.starting();
		try {
			ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
			ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);
			configureIgnoreBeanInfo(environment);
			Banner printedBanner = printBanner(environment);
			context = createApplicationContext();
			exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,
					new Class[] { ConfigurableApplicationContext.class }, context);
			prepareContext(context, environment, listeners, applicationArguments, printedBanner);
			refreshContext(context);
			afterRefresh(context, applicationArguments);
			stopWatch.stop();
			if (this.logStartupInfo) {
				new StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);
			}
			listeners.started(context);
			callRunners(context, applicationArguments);
		}
		catch (Throwable ex) {
			handleRunFailure(context, ex, exceptionReporters, listeners);
			throw new IllegalStateException(ex);
		}

		try {
			listeners.running(context);
		}
		catch (Throwable ex) {
			handleRunFailure(context, ex, exceptionReporters, null);
			throw new IllegalStateException(ex);
		}
		return context;
	}



SpringMvc的流程
	1、 用户发送请求至前端控制器DispatcherServlet。
	2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。
	3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。
	4、 DispatcherServlet调用HandlerAdapter处理器适配器。
	5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器，我们使用了@Controller注解，添加了@Controller注解注解的类就可以担任控制器（Action）的职责,)。
	6、 Controller执行完成返回ModelAndView。
	7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。
	8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。
	9、 ViewReslover解析后返回具体View。
	10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。
	11、DispatcherServlet响应用户。

Spring中bean的生命周期
1.spring容器启动 实例化相关的工厂类
2.执行Bean的构造器
3.为Bean注入属性
4.调用Bean的init-method属性指定的方法
5.容器初始化成功
6.关闭容器，将调用Bean的destroy-method属性指定的方法
7.Bean的生命周期结束

spring单例修改为多例  
	spring默认为单例模式，如果需要将单例模式修改为多例模式的话，使用@Scope注解，value=‘prototype’即可；
	
	关于@Scope注解  参考：https://my.oschina.net/u/2349331/blog/410221   https://my.oschina.net/xinxingegeya/blog/397513
		@Scope('singleton')  // 单例
		@Scope('prototype') //多例

单例和多例的使用场景
	之所以用单例，是因为没必要每个请求都新建一个对象，这样子既浪费CPU又浪费内存；
	之所以用多例，是为了防止并发问题；即一个请求改变了对象的状态，此时对象又处理另一个请求，而之前请求对对象状态的改变导致了对象对另一个请求做了错误的处理；
	用单例和多例的标准只有一个：
	当对象含有可改变的状态时（更精确的说就是在实际应用中该状态会改变），则多例，否则单例；
	
拦截器与过滤器
拦截器实现HandlerInterceptor接口 preHandle()  postHandle()  afterCompletion()
拦截的是Action调用对象 通过java反射、和动态代理实现

过滤器实现Filter接口 doFilter() destroy()
针对的是请求Request和响应Response  通过函数回调实现 依赖与servelt容器

pagehelper实现原理
修改了最终执行的sql
1.获取pageNo，pageSize参数
2.参数保存在ThreadLocal中--可以使每个线程独立开来，参数互不影响
3.pagehelper实现了mybatis的Interceptor的接口 -- 执行sql
4.在sql（查询的）执行过程中，执行两次 一次统计数量 一次进行数据查询


springCloud五个组件
1.注册中心  eureka、consul、zookeeper、 nacos（注册中心、配置中心） 服务注册
2.负载均衡 ribbon \ feign  
3.断路器  Hystrix  服务熔断
4.网关  zuul  提供一致性调用ip地址
5.配置中心  springCloud configurtion  服务配置文件管理


多线程、锁
Synchronized 
	对象锁、类锁
	修饰普通方法 使用对象锁工作
	修饰static方法 依靠类锁工作
	同步方法块：锁是括号里面的对象，对给定对象枷锁，进入同步代码块前，需要先获取给定对象的锁
	
ReentrantLock  乐观锁
ReadWriteLock  在读操作时为独占锁、在写操作是是共享锁
Volatile 关键字  线程可视化
CountDownLatch  主要用来解决一个线程等待多个线程的场景，可以类比旅游团团长要等待所有的游客到齐才能去下一个景点；
CyclicBarrier 计数器是可以循环利用的，而且具备自动重置的功能，一旦计数器减到0会自动重置到你设置的初始值


线程安全对象
Vector
CopyOnWriteArrayList
CopyOnWriteArraySet
ConCurrentHashMap
ConCurrentLinkedDeque
ConCurrentLinkedQueue
StringBuffer  Synchronized实现


sql优化 -- 符合索引使用规则
	应用优化、缓存优化、使用索引
sql索引
	索引使用：  1.最左原则
				2.索引列避免运算操作
				3.索引字符串加‘’（单引号）
				4.覆盖索引
				5.使用or索引失效  eg：or后面的的字段没有索引、该查询索引失效
					建议使用union 或是union all
	
Btree  数据包括在叶子节点和非叶子节点上 
B+tree  数据全部在叶子节点上  叶子节点为链表 （InnoDB）

叶子存储的是主键KEY,拿到主键KEY后，InnoDB才会去主键索引树里根据刚在 user_name 索引树找到的主键 KEY 查找到对应的数据。
问题来了，为什么 InnoDB 只在主键索引树的叶子节点存储了具体数据，但是其他索引树却不存具体数据呢，而要多此一举先找到主键，再在主键索引树找到对应的数据呢?
其实很简单，因为 InnoDB 需要节省存储空间。一个表里可能有很多个索引，InnoDB 都会给每个加了索引的字段生成索引树，如果每个字段的索引树都存储了具体数据，那么这个表的索引数据文件就变得非常巨大（数据极度冗余了）。从节约磁盘空间的角度来说，真的没有必要每个字段索引树都存具体数据，通过这种看似“多此一举”的步骤，在牺牲较少查询的性能下节省了巨大的磁盘空间，这是非常有值得的。

定位低效的sql
	1.慢查询日志
	2.show processList 实时查询
	3.explain  sql语句分析


分表  
	


mybatis xml 攻击 



mybatis 源码

public static void main(String[] args) {
		InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");
		SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);
		SqlSession sqlSession = factory.openSession();
		// String name = "tom";
		// List<User> list = sqlSession.selectList("com.demo.mapper.UserMapper.getUserByName",params);
		
		//这里不再调用SqlSession 的api，而是获得了接口对象，调用接口中的方法。
		UserMapper mapper = sqlSession.getMapper(UserMapper.class);
		List<User> list = mapper.getUserByName("tom");
}
mybatis实现步骤
1.创建SqlSessionFactoryBuilder对象，调用build(inputstream)方法读取并解析配置文件，返回SqlSessionFactory对象
2.由SqlSessionFactory创建SqlSession 对象，没有手动设置的话事务默认开启
// 3.调用SqlSession中的api，传入Statement Id和参数，内部进行复杂的处理，最后调用jdbc执行SQL语句，封装结果返回。
3.使用SqlSession.getMapper()获取接口对象
4.调用接口方法
	解析配置文件(mybatis-config.xml)-->创建Configuration对象-->获取SqlSession对象
	
	介绍一下MappedStatement ：
		作用： MappedStatement与Mapper配置文件中的一个select/update/insert/delete节点相对应。mapper中配置的标签都被封装到了此对象中，主要用途是描述一条SQL语句。
		**初始化过程：**回顾刚开始介绍的加载配置文件的过程中，会对mybatis-config.xml中的各个标签都进行解析，其中有 mappers标签用来引入mapper.xml文件或者配置mapper接口的目录。
		
		<select id="getUser" resultType="user" >
			select * from user where id=#{id}
		</select>
		这样的一个select标签会在初始化配置文件时被解析封装成一个MappedStatement对象，然后存储在Configuration对象的mappedStatements属性中，mappedStatements 是一个HashMap，存储时key = 全限定类名 + 方法名，value = 对应的MappedStatement对象。
		
	通常的Mapper接口我们都没有实现的方法却可以使用，是为什么呢？答案很简单 动态代理


Dubbo相关问题
	1.服务提供者  服务提供者将服务注册到注册中心
	2.服务消费者  服务消费者根据注册中心提供的服务列表，选择服务，将远程服务提供者本地化，然后调用相关接口
	3.注册中心  服务提供者将服务注册到注册中心，注册中心提供服务列表给服务提供者。
	4.监控中心  统计服务的调用次数和调用时间的监控中心 检测服务心跳
	
	先启动注册中心-->服务提供者-->服务消费者

	
java 动态代理和反射	

linux 自动化部署









